plugins {
    id 'java'
    id 'application'
    id 'com.avast.gradle.docker-compose' version '0.14.0'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.7.0'
}

def kafka_dir = '/usr/local/kafka_2.13-3.3.1/bin'
mainClassName = 'clients.VehiclePositionProducer'

test {
    dependsOn('createKafkaTopics')
    useJUnitPlatform()
}

dockerCompose {
    useComposeFiles.add("src/test/resources/docker-compose.yml")
    isRequiredBy(tasks.test)
}

repositories {
    gradlePluginPortal()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

jar {
    archiveBaseName = 'kafka-consumer'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

dependencies {
    implementation 'org.apache.kafka:kafka-clients:3.3.2'
    implementation 'org.apache.kafka:kafka-streams:3.3.2'
    implementation 'io.confluent:kafka-streams-avro-serde:7.3.3'
    implementation 'org.apache.avro:avro:1.11.1'
    implementation 'org.slf4j:slf4j-log4j12:2.0.7'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.awaitility:awaitility:4.2.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.register('createKafkaTopicVehiclePosition', Exec) {
    dependsOn(composeUp)
    commandLine "${kafka_dir}/kafka-topics.sh",
                '--bootstrap-server',  'kafka:9092',
                '--topic', 'vehicle-position',
                '--create',
                '--partitions', '1',
                '--replication-factor', '1'
}

tasks.register('createKafkaTopicVehiclePositionStreamOut', Exec) {
    dependsOn(createKafkaTopicVehiclePosition)
    commandLine "${kafka_dir}/kafka-topics.sh",
            '--bootstrap-server',  'kafka:9092',
            '--topic', 'vehicle-position-stream-out',
            '--create',
            '--partitions', '1',
            '--replication-factor', '1'
}

tasks.register("createKafkaTopics") {
    dependsOn(createKafkaTopicVehiclePositionStreamOut)
}
